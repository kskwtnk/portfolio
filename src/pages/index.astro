---
import { getCollection } from "astro:content";
import GlobalLayout from "../layouts/GlobalLayout.astro";

const allWorks = await getCollection("works");
---

<GlobalLayout>
  <div id="above-the-fold">
    <div id="p5-container"></div>
    <div>
      <header id="header">
        <h1>
          <ruby
            ><span>綿貫 佳祐</span><rp>(</rp><rt>ワタヌキ ケイスケ</rt><rp>)</rp
            ></ruby
          >
        </h1>
        <h2>ユーザーインターフェース / マークアップ / グラフィック</h2>
        <span id="name-top">綿貫 佳祐</span>
      </header>
      <span id="scroll-guide">下へスクロール</span>
      <nav>
        <ul>
          <li>
            <a href="#about-me">私</a>
          </li>
          <li>
            <a href="#works">制作物</a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
  <section>
    <h2 id="about-me">私</h2>
    <div>
      <p>
        デジタルプロダクトのデザイナーです。理想に向き合い、言語化し、視覚化するプロセスを重視しています。静的な意匠だけでなく、データの構造や使用時の心地よさなども考慮に入れながら制作するよう心掛けています。
      </p>
      <p>
        答えの無い問いに向き合うのが好きで、自分自身の在り方や世の中を美しくするための方法について考えている時間が長いです。
      </p>
      <p>
        <a href="/about-me">詳細なプロフィールを読む</a>
      </p>
    </div>
  </section>
  <section>
    <h2 id="works">制作物</h2>
    <div>
      {
        allWorks.map((work) => (
          <a href={`${work.collection}/${work.slug}`}>
            <h3>{work.data.title}</h3>
          </a>
        ))
      }
    </div>
  </section>
</GlobalLayout>

<!-- <script>
  import p5 from "p5";

  const sketch = (p: p5) => {
    const particles: p5.Vector[] = [];
    const numberOfPoints = 4000;
    const noiseScale = 0.01;

    function perticlesPush() {
      for (let i = 0; i < numberOfPoints; i++) {
        particles.push(p.createVector(p.random(p.width), p.random(p.height)));
      }
    }

    p.setup = () => {
      p.createCanvas(p.windowWidth, p.windowHeight);
      perticlesPush();
      p.stroke(225);
      p.background(0, 0);
    };

    p.draw = () => {
      for (let i = 0; i < numberOfPoints; i++) {
        const particle = particles[i];
        p.point(particle.x, particle.y);
        const noise = p.noise(particle.x * noiseScale, particle.y * noiseScale);
        particle.x -= 5 * p.cos(noise * p.TAU);
        particle.y -= 5 * p.sin(noise * p.TAU);
      }
    };

    p.windowResized = () => {
      p.resizeCanvas(p.windowWidth, p.windowHeight);
      particles.splice(0, particles.length);
      perticlesPush();
    };
  };

  const containerElement = document.getElementById("p5-container");

  if (containerElement !== null) {
    new p5(sketch, containerElement);
  } else {
    console.error("Element with ID 'p5-container' not found");
  }
</script>

<script>
  const observationTarget = document.getElementById("above-the-fold");
  if (!observationTarget) {
    throw new Error("Element with ID 'above-the-fold' not found");
  }

  const scrollGuide = document.getElementById("scroll-guide");
  if (!scrollGuide) {
    throw new Error("Element with ID 'scroll-guide' not found");
  }

  const options = {
    root: null,
    rootMargin: "64px",
    threshold: 1,
  };

  const observerCallback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry: { isIntersecting: boolean }) => {
      if (entry.isIntersecting) {
        scrollGuide.style.opacity = "1";
        scrollGuide.style.transform = "translateY(0)";
      } else {
        scrollGuide.style.opacity = "0";
        scrollGuide.style.transform = "translateY(-16px)";
        scrollGuide.style.transition =
          "opacity 300ms ease-in-out, transform 300ms ease-in-out";
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, options);

  observer.observe(observationTarget);
</script>

<script>
  const observationTarget = document.getElementById("categories");
  if (!observationTarget) {
    throw new Error("Element with ID 'categories' not found");
  }

  const nameTop = document.getElementById("name-top");
  if (!nameTop) {
    throw new Error("Element with ID 'name-top' not found");
  }

  const options = {
    root: null,
    rootMargin: "16px",
    threshold: 0,
  };

  const observerCallback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        nameTop.style.opacity = "0";
        nameTop.style.filter = "blur(2px)";
      } else {
        nameTop.style.opacity = "1";
        nameTop.style.filter = "blur(0)";
        nameTop.style.transition =
          "opacity 300ms ease-in-out, filter 300ms ease-in-out";
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, options);

  observer.observe(observationTarget);
</script>

<script>
  const observationTarget = document.getElementById("about-me");
  if (!observationTarget) {
    throw new Error("Element with ID 'about-me' not found");
  }

  const p5Container = document.getElementById("p5-container");
  if (!p5Container) {
    throw new Error("Element with ID 'p5-container' not found");
  }

  const options = {
    root: null,
    rootMargin: "16px",
    threshold: 0,
  };

  const observerCallback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        p5Container.style.opacity = "0.35";
        p5Container.style.transition = "opacity 400ms ease-in-out";
      } else {
        p5Container.style.opacity = "1";
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, options);

  observer.observe(observationTarget);
</script> -->
