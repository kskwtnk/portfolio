---
import "../styles/global.css";
import "@fontsource/noto-serif-jp/400.css";
import "@fontsource/noto-serif-jp/700.css";
---

<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <body>
    <div class="above-the-fold">
      <div id="p5-container"></div>
      <div class="above-the-fold-foreground">
        <header class="header">
          <h1 class="title">
            <ruby class="name"
              >綿貫 佳祐<rp>(</rp><rt>ワタヌキ ケイスケ</rt><rp>)</rp></ruby
            >
          </h1>
          <h2 class="categories">
            ユーザーインターフェース / マークアップ / グラフィック
          </h2>
        </header>
        <span class="scroll-guide">下へスクロール</span>
        <nav class="navigation">
          <ul class="navigation-list">
            <li class="navigation-list-item -active">
              <a href="#a">私</a>
            </li>
            <li class="navigation-list-item">
              <a href="#b">制作物</a>
            </li>
            <li class="navigation-list-item">
              <a href="#c">手記</a>
            </li>
            <li class="navigation-list-item">
              <a href="#d">連絡先</a>
            </li>
          </ul>
        </nav>
      </div>
    </div>
  </body>
</html>

<script>
  import p5 from "p5";

  const sketch = (p: p5) => {
    const particles: p5.Vector[] = [];
    const numberOfPoints = 2000;
    const noiseScale = 0.01;

    function perticlesPush() {
      for (let i = 0; i < numberOfPoints; i++) {
        particles.push(p.createVector(p.random(p.width), p.random(p.height)));
      }
    }

    p.setup = () => {
      p.createCanvas(p.windowWidth, p.windowHeight);
      perticlesPush();
      p.stroke(225);
      p.background(0, 0);
    };

    p.draw = () => {
      for (let i = 0; i < numberOfPoints; i++) {
        const particle = particles[i];
        p.point(particle.x, particle.y);
        const noise = p.noise(particle.x * noiseScale, particle.y * noiseScale);
        particle.x -= 5 * p.cos(noise * p.TAU);
        particle.y -= 5 * p.sin(noise * p.TAU);
      }
    };

    p.windowResized = () => {
      p.resizeCanvas(p.windowWidth, p.windowHeight);
      particles.splice(0, particles.length);
      perticlesPush();
    };
  };

  const containerElement = document.getElementById("p5-container");

  if (containerElement !== null) {
    new p5(sketch, containerElement);
  } else {
    console.error("Element with ID 'p5-container' not found");
  }
</script>

<style>
  a {
    color: inherit;
    text-decoration: inherit;
  }
  .above-the-fold {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    height: 100dvh;
    width: 100dvw;
  }
  .above-the-fold-foreground {
    display: grid;
    grid-column: 1 / -1;
    grid-row: 1 / -1;
    grid-template-rows: 1fr auto;
    height: 100dvh;
    padding: 60px 90px;
    width: 100dvw;
  }
  #p5-container {
    grid-column: 1 / -1;
    grid-row: 1 / -1;
    height: 100dvh;
    width: 100dvw;
  }
  .header {
    align-content: center;
    display: grid;
    gap: 72px;
    grid-row: 1 / 2;
    line-height: 1;
  }
  .title {
    font-weight: 700;
    text-shadow: 4px 4px 16px var(--background-color),
      -4px 4px 16px var(--background-color),
      4px -4px 16px var(--background-color),
      -4px -4px 16px var(--background-color);
  }
  .name {
    display: grid;
    font-size: 8rem;
    gap: 48px;
  }
  .name > rt {
    display: unset;
    font-size: 3.5rem;
    line-height: inherit;
    text-align: left;
  }
  .categories {
    font-size: 1.5rem;
    text-shadow: 4px 4px 6px var(--background-color),
      -4px 4px 6px var(--background-color), 4px -4px 6px var(--background-color),
      -4px -4px 6px var(--background-color);
  }
  .scroll-guide {
    align-self: end;
    font-size: 0.875rem;
    grid-row: -2 / -1;
    justify-self: start;
    writing-mode: vertical-lr;
  }
  .scroll-guide::after {
    content: url('data:image/svg+xml;utf-8,<svg fill="currentColor" width="18" height="14" viewBox="0 0 18 14" xmlns="http://www.w3.org/2000/svg"><path d="M1 0L0 1C3 2 7 5 9 7C11 5 15 2 18 1L17 0C13 1 9 4 9 4C9 4 5 1 1 0Z"/><path d="M1 7L0 8C3 9 7 12 9 14C11 12 15 9 18 8L17 7C13 8 9 11 9 11C9 11 5 8 1 7Z"/></svg>');
    margin-inline-start: 12px;
  }

  .navigation {
    align-self: end;
    display: flex;
    grid-row: -2 / -1;
    justify-self: end;
  }
  .navigation-list {
    background-color: hsl(0 0% 100%);
    border-radius: calc(infinity * 1px);
    display: flex;
    list-style-type: none;
    padding: 6px;
  }
  .navigation-list-item {
    padding: 6px 12px;
  }
  .navigation-list-item.-active {
    background-color: hsl(0 0% 92%);
    border-radius: calc(infinity * 1px);
  }
</style>
